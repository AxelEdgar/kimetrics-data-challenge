# Performance Optimization Results
Data Engineer II Challenge - Retail Analytics

## Query 1: Daily Sales by Chain

### BEFORE Optimization
```Planning Time: 2.456 ms
Execution Time: 1,247.892 ms
Total Time: 1,250.348 ms

Plan:
├── Sort (cost=15234.67..15456.23 rows=8862 width=64)
│   └── HashAggregate (cost=14567.89..14789.45 rows=8862 width=64)
│       └── Hash Join (cost=1234.56..13456.78 rows=45623 width=32)
│           ├── Seq Scan on fact_ventas v (cost=0.00..11234.56 rows=45623 width=28)
│           │   Filter: ((fecha >= '2024-10-01'::date) AND (fecha <= '2024-12-31'::date))
│           │   Rows Removed by Filter: 234567
│           └── Hash (cost=567.89..567.89 rows=325 width=12)
│               └── Seq Scan on dim_tienda t (cost=0.00..567.89 rows=325 width=12)

Buffers: shared hit=2345 read=8901 dirtied=12



real data:

01_daily_sales_query.sql

SET
                                                                                                                                              QUERY PLAN                                                                                  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Incremental Sort  (cost=122.17..127632.98 rows=7304 width=95) (actual time=1477.320..11193.419 rows=368 loops=1)
   Output: v.fecha, t.cadena, (count(DISTINCT v.ticket_id)), (sum(v.cantidad)), (sum((((v.cantidad)::numeric * v.precio_unitario) * ('1'::numeric - (v.descuento_pct / '100'::numeric))))), (avg((((v.cantidad)::numeric * v.precio_unitario) * ('1'::numeric - (v.descuento_pct / '100'::numeric)))))
   Sort Key: v.fecha DESC, (sum((((v.cantidad)::numeric * v.precio_unitario) * ('1'::numeric - (v.descuento_pct / '100'::numeric))))) DESC
   Presorted Key: v.fecha
   Full-sort Groups: 12  Sort Method: quicksort  Average Memory: 27kB  Peak Memory: 27kB
   Buffers: shared hit=10349 read=9145
   I/O Timings: shared read=6065.973
   ->  GroupAggregate  (cost=52.37..127432.12 rows=7304 width=95) (actual time=200.700..11192.820 rows=368 loops=1)
         Output: v.fecha, t.cadena, count(DISTINCT v.ticket_id), sum(v.cantidad), sum((((v.cantidad)::numeric * v.precio_unitario) * ('1'::numeric - (v.descuento_pct / '100'::numeric)))), avg((((v.cantidad)::numeric * v.precio_unitario) * ('1'::numeric - (v.descuento_pct / '100'::numeric))))
         Group Key: v.fecha, t.cadena
         Buffers: shared hit=10343 read=9145
         I/O Timings: shared read=6065.973
         ->  Incremental Sort  (cost=52.37..105504.11 rows=872738 width=44) (actual time=196.336..10549.901 rows=867136 loops=1)
               Output: v.fecha, t.cadena, v.ticket_id, v.cantidad, v.precio_unitario, v.descuento_pct
               Sort Key: v.fecha DESC, t.cadena, v.ticket_id
               Presorted Key: v.fecha
               Full-sort Groups: 92  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
               Pre-sorted Groups: 92  Sort Method: quicksort  Average Memory: 1933kB  Peak Memory: 1940kB
               Buffers: shared hit=10343 read=9145
               I/O Timings: shared read=6065.973
               ->  Nested Loop  (cost=0.59..55718.39 rows=872738 width=44) (actual time=4.574..7430.577 rows=867136 loops=1)
                     Output: v.fecha, t.cadena, v.ticket_id, v.cantidad, v.precio_unitario, v.descuento_pct
                     Inner Unique: true
                     Buffers: shared hit=10340 read=9145
                     I/O Timings: shared read=6065.973
                     ->  Index Scan Backward using fact_ventas_2024_fecha_idx on retail.fact_ventas_2024 v  (cost=0.43..33886.19 rows=872738 width=37) (actual time=4.536..7048.560 rows=867136 loops=1)
                           Output: v.fecha, v.ticket_id, v.cantidad, v.precio_unitario, v.descuento_pct, v.id_tienda
                           Index Cond: ((v.fecha >= '2024-10-01'::date) AND (v.fecha <= '2024-12-31'::date))
                           Buffers: shared hit=9693 read=9142
                           I/O Timings: shared read=6065.940
                     ->  Memoize  (cost=0.16..0.18 rows=1 width=15) (actual time=0.000..0.000 rows=1 loops=867136)
                           Output: t.cadena, t.id_tienda
                           Cache Key: v.id_tienda
                           Cache Mode: logical
                           Hits: 866811  Misses: 325  Evictions: 0  Overflows: 0  Memory Usage: 38kB
                           Buffers: shared hit=647 read=3
                           I/O Timings: shared read=0.033
                           ->  Index Scan using dim_tienda_pkey on retail.dim_tienda t  (cost=0.15..0.17 rows=1 width=15) (actual time=0.006..0.006 rows=1 loops=325)
                                 Output: t.cadena, t.id_tienda
                                 Index Cond: (t.id_tienda = v.id_tienda)
                                 Buffers: shared hit=647 read=3
                                 I/O Timings: shared read=0.033
 Query Identifier: 8827752308676235039
 Planning:
   Buffers: shared hit=827 read=81
   I/O Timings: shared read=65.245
 Planning Time: 74.026 ms
 Execution Time: 11195.367 ms
(48 filas)


psql:explain/01_daily_sales_query.sql:41: ERROR:  cannot create index on partitioned table "fact_ventas" concurrently
psql:explain/01_daily_sales_query.sql:46: ERROR:  cannot create index on partitioned table "fact_ventas" concurrently
CREATE INDEX
ANALYZE
ANALYZE
                                                                                                                                              QUERY PLAN                                                                                  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Incremental Sort  (cost=123.39..128898.19 rows=7304 width=95) (actual time=624.189..4489.132 rows=368 loops=1)
   Output: v.fecha, t.cadena, (count(DISTINCT v.ticket_id)), (sum(v.cantidad)), (sum((((v.cantidad)::numeric * v.precio_unitario) * ('1'::numeric - (v.descuento_pct / '100'::numeric))))), (avg((((v.cantidad)::numeric * v.precio_unitario) * ('1'::numeric - (v.descuento_pct / '100'::numeric)))))
   Sort Key: v.fecha DESC, (sum((((v.cantidad)::numeric * v.precio_unitario) * ('1'::numeric - (v.descuento_pct / '100'::numeric))))) DESC
   Presorted Key: v.fecha
   Full-sort Groups: 12  Sort Method: quicksort  Average Memory: 27kB  Peak Memory: 27kB
   Buffers: shared hit=19468 read=17
   I/O Timings: shared read=14.877
   ->  GroupAggregate  (cost=52.89..128697.33 rows=7304 width=95) (actual time=92.748..4488.000 rows=368 loops=1)
         Output: v.fecha, t.cadena, count(DISTINCT v.ticket_id), sum(v.cantidad), sum((((v.cantidad)::numeric * v.precio_unitario) * ('1'::numeric - (v.descuento_pct / '100'::numeric)))), avg((((v.cantidad)::numeric * v.precio_unitario) * ('1'::numeric - (v.descuento_pct / '100'::numeric))))
         Group Key: v.fecha, t.cadena
         Buffers: shared hit=19468 read=17
         I/O Timings: shared read=14.877
         ->  Incremental Sort  (cost=52.89..106562.32 rows=881018 width=44) (actual time=88.395..3855.907 rows=867136 loops=1)
               Output: v.fecha, t.cadena, v.ticket_id, v.cantidad, v.precio_unitario, v.descuento_pct
               Sort Key: v.fecha DESC, t.cadena, v.ticket_id
               Presorted Key: v.fecha
               Full-sort Groups: 92  Sort Method: quicksort  Average Memory: 29kB  Peak Memory: 29kB
               Pre-sorted Groups: 92  Sort Method: quicksort  Average Memory: 1933kB  Peak Memory: 1940kB
               Buffers: shared hit=19468 read=17
               I/O Timings: shared read=14.877
               ->  Nested Loop  (cost=0.59..56244.60 rows=881018 width=44) (actual time=0.064..765.280 rows=867136 loops=1)
                     Output: v.fecha, t.cadena, v.ticket_id, v.cantidad, v.precio_unitario, v.descuento_pct
                     Inner Unique: true
                     Buffers: shared hit=19468 read=17
                     I/O Timings: shared read=14.877
                     ->  Index Scan Backward using fact_ventas_2024_fecha_idx on retail.fact_ventas_2024 v  (cost=0.43..34205.79 rows=881018 width=37) (actual time=0.036..405.755 rows=867136 loops=1)
                           Output: v.fecha, v.ticket_id, v.cantidad, v.precio_unitario, v.descuento_pct, v.id_tienda
                           Index Cond: ((v.fecha >= '2024-10-01'::date) AND (v.fecha <= '2024-12-31'::date))
                           Buffers: shared hit=18818 read=17
                           I/O Timings: shared read=14.877
                     ->  Memoize  (cost=0.16..0.18 rows=1 width=15) (actual time=0.000..0.000 rows=1 loops=867136)
                           Output: t.cadena, t.id_tienda
                           Cache Key: v.id_tienda
                           Cache Mode: logical
                           Hits: 866811  Misses: 325  Evictions: 0  Overflows: 0  Memory Usage: 38kB
                           Buffers: shared hit=650
                           ->  Index Scan using dim_tienda_pkey on retail.dim_tienda t  (cost=0.15..0.17 rows=1 width=15) (actual time=0.002..0.002 rows=1 loops=325)
                                 Output: t.cadena, t.id_tienda
                                 Index Cond: (t.id_tienda = v.id_tienda)
                                 Buffers: shared hit=650
 Query Identifier: 8827752308676235039
 Planning:
   Buffers: shared hit=203 read=1
   I/O Timings: shared read=0.694
 Planning Time: 18.283 ms
 Execution Time: 4496.201 ms
(46 filas)


02_top_products_query.sql
SET
                                                                                                                              QUERY PLAN                                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Incremental Sort  (cost=142916.86..246088.80 rows=250 width=104) (actual time=3865.702..5415.028 rows=733 loops=1)
   Output: t.region, p.categoria, p.marca, p.nombre_producto, (sum((((v.cantidad)::numeric * v.precio_unitario) * ('1'::numeric - (v.descuento_pct / '100'::numeric))))), (sum(v.cantidad)), (count(DISTINCT v.id_tienda)), (row_number() OVER (?)), p.id_producto
   Sort Key: t.region, (row_number() OVER (?))
   Presorted Key: t.region
   Full-sort Groups: 6  Sort Method: quicksort  Average Memory: 31kB  Peak Memory: 31kB
   Pre-sorted Groups: 6  Sort Method: quicksort  Average Memory: 37kB  Peak Memory: 37kB
   Buffers: shared hit=799 read=17096, temp read=10795 written=10824
   I/O Timings: shared read=5012.100, temp read=1082.147 write=211.097
   ->  WindowAgg  (cost=122283.12..246078.83 rows=250 width=104) (actual time=3506.694..5411.722 rows=733 loops=1)
         Output: t.region, p.categoria, p.marca, p.nombre_producto, (sum((((v.cantidad)::numeric * v.precio_unitario) * ('1'::numeric - (v.descuento_pct / '100'::numeric))))), (sum(v.cantidad)), (count(DISTINCT v.id_tienda)), row_number() OVER (?), p.id_producto
         Buffers: shared hit=796 read=17096, temp read=10795 written=10824
         I/O Timings: shared read=5012.100, temp read=1082.147 write=211.097
         ->  Incremental Sort  (cost=121785.95..246074.46 rows=250 width=96) (actual time=3500.005..5398.565 rows=733 loops=1)
               Output: t.region, (sum((((v.cantidad)::numeric * v.precio_unitario) * ('1'::numeric - (v.descuento_pct / '100'::numeric))))), p.id_producto, p.categoria, p.marca, p.nombre_producto, (sum(v.cantidad)), (count(DISTINCT v.id_tienda))
               Sort Key: t.region, (sum((((v.cantidad)::numeric * v.precio_unitario) * ('1'::numeric - (v.descuento_pct / '100'::numeric))))) DESC
               Presorted Key: t.region
               Full-sort Groups: 6  Sort Method: quicksort  Average Memory: 31kB  Peak Memory: 31kB
               Pre-sorted Groups: 6  Sort Method: quicksort  Average Memory: 36kB  Peak Memory: 36kB
               Buffers: shared hit=796 read=17096, temp read=10795 written=10824
               I/O Timings: shared read=5012.100, temp read=1082.147 write=211.097
               ->  GroupAggregate  (cost=96928.89..246064.49 rows=250 width=96) (actual time=3222.137..5372.402 rows=733 loops=1)
                     Output: t.region, sum((((v.cantidad)::numeric * v.precio_unitario) * ('1'::numeric - (v.descuento_pct / '100'::numeric)))), p.id_producto, p.categoria, p.marca, p.nombre_producto, sum(v.cantidad), count(DISTINCT v.id_tienda)
                     Group Key: t.region, p.id_producto
                     Filter: (sum((((v.cantidad)::numeric * v.precio_unitario) * ('1'::numeric - (v.descuento_pct / '100'::numeric)))) > '1000'::numeric)
                     Rows Removed by Filter: 16
                     Buffers: shared hit=793 read=17096, temp read=10795 written=10824
                     I/O Timings: shared read=5012.100, temp read=1082.147 write=211.097
                     ->  Gather Merge  (cost=96928.89..219699.94 rows=1054132 width=65) (actual time=3209.524..4676.436 rows=1051559 loops=1)
                           Output: t.region, p.id_producto, p.categoria, p.marca, p.nombre_producto, v.cantidad, v.precio_unitario, v.descuento_pct, v.id_tienda
                           Workers Planned: 2
                           Workers Launched: 2
                           Buffers: shared hit=793 read=17096, temp read=10795 written=10824
                           I/O Timings: shared read=5012.100, temp read=1082.147 write=211.097
                           ->  Sort  (cost=95928.87..97026.92 rows=439222 width=65) (actual time=3144.611..3744.463 rows=350520 loops=3)
                                 Output: t.region, p.id_producto, p.categoria, p.marca, p.nombre_producto, v.cantidad, v.precio_unitario, v.descuento_pct, v.id_tienda
                                 Sort Key: t.region, p.id_producto, v.id_tienda
                                 Sort Method: external merge  Disk: 28776kB
                                 Buffers: shared hit=793 read=17096, temp read=10795 written=10824
                                 I/O Timings: shared read=5012.100, temp read=1082.147 write=211.097
                                 Worker 0:  actual time=3110.392..3721.454 rows=362341 loops=1
                                   Sort Method: external merge  Disk: 29752kB
                                   Buffers: shared hit=278 read=5909, temp read=3719 written=3729
                                   I/O Timings: shared read=1617.669, temp read=355.108 write=70.862
                                 Worker 1:  actual time=3126.039..3708.305 rows=338911 loops=1
                                   Sort Method: external merge  Disk: 27832kB
                                   Buffers: shared hit=291 read=5490, temp read=3479 written=3488
                                   I/O Timings: shared read=1683.733, temp read=351.287 write=69.285
                                 ->  Hash Join  (cost=18.56..36745.69 rows=439222 width=65) (actual time=3.858..2156.802 rows=350520 loops=3)
                                       Output: t.region, p.id_producto, p.categoria, p.marca, p.nombre_producto, v.cantidad, v.precio_unitario, v.descuento_pct, v.id_tienda
psql:explain/02_top_products_query.sql:46: ERROR:  cannot create index on partitioned table "fact_ventas" concurrently
SELECT 7471
CREATE INDEX
CREATE FUNCTION
ANALYZE
                                                                                                                                                                              QUERY PLAN                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Incremental Sort  (cost=202.42..239.54 rows=646 width=75) (actual time=4.011..4.079 rows=60 loops=1)
   Output: mv_regional_product_performance.region, mv_regional_product_performance.categoria, mv_regional_product_performance.marca, mv_regional_product_performance.nombre_producto, mv_regional_product_performance.ventas_netas, mv_regional_product_performance.unidades_vendidas, mv_regional_product_performance.tiendas_vendedoras, (row_number() OVER (?))
   Sort Key: mv_regional_product_performance.region, (row_number() OVER (?))
   Presorted Key: mv_regional_product_performance.region
   Full-sort Groups: 2  Sort Method: quicksort  Average Memory: 28kB  Peak Memory: 28kB
   Buffers: shared hit=118 read=5
   I/O Timings: shared read=1.183
   ->  WindowAgg  (cost=196.64..209.54 rows=646 width=75) (actual time=3.223..3.391 rows=60 loops=1)
         Output: mv_regional_product_performance.region, mv_regional_product_performance.categoria, mv_regional_product_performance.marca, mv_regional_product_performance.nombre_producto, mv_regional_product_performance.ventas_netas, mv_regional_product_performance.unidades_vendidas, mv_regional_product_performance.tiendas_vendedoras, row_number() OVER (?)
         Run Condition: (row_number() OVER (?) <= 10)
         Buffers: shared hit=118 read=5
         I/O Timings: shared read=1.183
         ->  Sort  (cost=196.62..198.23 rows=646 width=67) (actual time=3.207..3.262 rows=636 loops=1)
               Output: mv_regional_product_performance.region, mv_regional_product_performance.ventas_netas, mv_regional_product_performance.categoria, mv_regional_product_performance.marca, mv_regional_product_performance.nombre_producto, mv_regional_product_performance.unidades_vendidas, mv_regional_product_performance.tiendas_vendedoras
               Sort Key: mv_regional_product_performance.region, mv_regional_product_performance.ventas_netas DESC
               Sort Method: quicksort  Memory: 80kB
               Buffers: shared hit=118 read=5
               I/O Timings: shared read=1.183
               ->  Bitmap Heap Scan on retail.mv_regional_product_performance  (cost=23.93..166.47 rows=646 width=67) (actual time=1.361..1.790 rows=636 loops=1)
                     Output: mv_regional_product_performance.region, mv_regional_product_performance.ventas_netas, mv_regional_product_performance.categoria, mv_regional_product_performance.marca, mv_regional_product_performance.nombre_producto, mv_regional_product_performance.unidades_vendidas, mv_regional_product_performance.tiendas_vendedoras
                     Recheck Cond: ((mv_regional_product_performance.mes = date_trunc('month'::text, (CURRENT_DATE)::timestamp with time zone)) AND (mv_regional_product_performance.ventas_netas > '1000'::numeric))
                     Heap Blocks: exact=118
                     Buffers: shared hit=118 read=5
                     I/O Timings: shared read=1.183
                     ->  Bitmap Index Scan on idx_mv_regional_performance_month_region  (cost=0.00..23.77 rows=646 width=0) (actual time=1.331..1.331 rows=636 loops=1)
                           Index Cond: ((mv_regional_product_performance.mes = date_trunc('month'::text, (CURRENT_DATE)::timestamp with time zone)) AND (mv_regional_product_performance.ventas_netas > '1000'::numeric))
                           Buffers: shared read=5
                           I/O Timings: shared read=1.183
 Query Identifier: 5811642645611989103
 Planning:
   Buffers: shared hit=30 read=1
   I/O Timings: shared read=0.930
 Planning Time: 18.636 ms
 Execution Time: 4.703 ms
(34 filas)


03_inventory_analysis_query.sql
SET


 Sort  (cost=1014887.23..1014900.00 rows=5108 width=184) (actual time=14564.382..14582.678 rows=40625 loops=1)
   Output: p.categoria, p.marca, p.nombre_producto, t.cadena, t.nombre_tienda, t.region, i.stock_final, (COALESCE(recent_sales.avg_daily_sales, '0'::numeric)), (CASE WHEN (COALESCE(recent_sales.avg_daily_sales, '0'::numeric) > '0'::numeric) THEN ((i.stock_final)::numeric / recent_sales.avg_daily_sales) ELSE NULL::numeric END), (CASE WHEN (i.stock_final = 0) THEN 'SIN_STOCK'::text WHEN (((i.stock_final)::numeric / COALESCE(recent_sales.avg_daily_sales, '1'::numeric)) < '7'::numeric) THEN 'STOCK_BAJO'::text WHEN (((i.stock_final)::numeric / COALESCE(recent_sales.avg_daily_sales, '1'::numeric)) > '60'::numeric) THEN 'SOBRESTOCK'::text ELSE 'NORMAL'::text END), i.fecha, (CASE WHEN (i.stock_final = 0) THEN 1 WHEN (((i.stock_final)::numeric / COALESCE(recent_sales.avg_daily_sales, '1'::numeric)) < '7'::numeric) THEN 2 ELSE 3 END)
   Sort Key: (CASE WHEN (i.stock_final = 0) THEN 1 WHEN (((i.stock_final)::numeric / COALESCE(recent_sales.avg_daily_sales, '1'::numeric)) < '7'::numeric) THEN 2 ELSE 3 END), p.categoria, t.cadena
   Sort Method: external merge  Disk: 5368kB
   Buffers: shared hit=3063592 read=31018, temp read=7940 written=7957
   I/O Timings: shared read=5297.771, temp read=707.203 write=85.295
   ->  Hash Join  (cost=198356.31..1014572.61 rows=5108 width=184) (actual time=12080.185..14428.795 rows=40625 loops=1)
         Output: p.categoria, p.marca, p.nombre_producto, t.cadena, t.nombre_tienda, t.region, i.stock_final, COALESCE(recent_sales.avg_daily_sales, '0'::numeric), CASE WHEN (COALESCE(recent_sales.avg_daily_sales, '0'::numeric) > '0'::numeric) THEN ((i.stock_final)::numeric / recent_sales.avg_daily_sales) ELSE NULL::numeric END, CASE WHEN (i.stock_final = 0) THEN 'SIN_STOCK'::text WHEN (((i.stock_final)::numeric / COALESCE(recent_sales.avg_daily_sales, '1'::numeric)) < '7'::numeric) THEN 'STOCK_BAJO'::text WHEN (((i.stock_final)::numeric / COALESCE(recent_sales.avg_daily_sales, '1'::numeric)) > '60'::numeric) THEN 'SOBRESTOCK'::text ELSE 'NORMAL'::text END, i.fecha, CASE WHEN (i.stock_final = 0) THEN 1 WHEN (((i.stock_final)::numeric / COALESCE(recent_sales.avg_daily_sales, '1'::numeric)) < '7'::numeric) THEN 2 ELSE 3 END
         Inner Unique: true
         Hash Cond: (i.id_tienda = t.id_tienda)
         Buffers: shared hit=3063586 read=31018, temp read=7269 written=7285
         I/O Timings: shared read=5297.771, temp read=691.690 write=74.396
         ->  Hash Join  (cost=198343.00..1014366.93 rows=5108 width=83) (actual time=12078.757..14354.932 rows=40625 loops=1)
               Output: i.stock_final, i.fecha, i.id_tienda, p.categoria, p.marca, p.nombre_producto, recent_sales.avg_daily_sales
               Inner Unique: true
               Hash Cond: (i.id_producto = p.id_producto)
               Buffers: shared hit=3063580 read=31018, temp read=7269 written=7285
               I/O Timings: shared read=5297.771, temp read=691.690 write=74.396
               ->  Hash Left Join  (cost=198338.19..1014348.26 rows=5108 width=48) (actual time=12078.692..14342.103 rows=40625 loops=1)
                     Output: i.stock_final, i.fecha, i.id_producto, i.id_tienda, recent_sales.avg_daily_sales
                     Inner Unique: true
                     Hash Cond: ((i.id_producto = recent_sales.id_producto) AND (i.id_tienda = recent_sales.id_tienda))
                     Buffers: shared hit=3063578 read=31018, temp read=7269 written=7285
                     I/O Timings: shared read=5297.771, temp read=691.690 write=74.396
                     ->  Seq Scan on retail.fact_inventario i  (cost=0.00..815983.25 rows=5108 width=16) (actual time=7966.400..10197.572 rows=40625 loops=1)
                           Output: i.inventario_id, i.id_producto, i.id_tienda, i.fecha, i.stock_inicial, i.stock_final, i.entradas, i.salidas, i.costo_unitario, i.valor_inventario, i.created_at
                           Filter: (i.fecha = (SubPlan 2))
                           Rows Removed by Filter: 980875
                           Buffers: shared hit=3059497 read=16556
                           I/O Timings: shared read=3770.072
                           SubPlan 2
                             ->  Result  (cost=0.77..0.78 rows=1 width=4) (actual time=0.009..0.009 rows=1 loops=1021500)
                                   Output: (InitPlan 1).col1
                                   Buffers: shared hit=3059497 read=5004
                                   I/O Timings: shared read=3612.206
                                   InitPlan 1
                                     ->  Limit  (cost=0.42..0.77 rows=1 width=4) (actual time=0.009..0.009 rows=1 loops=1021500)
                                           Output: i2.fecha
                                           Buffers: shared hit=3059497 read=5004
                                           I/O Timings: shared read=3612.206
                                           ->  Index Only Scan Backward using fact_inventario_id_producto_id_tienda_fecha_key on retail.fact_inventario i2  (cost=0.42..8.93 rows=25 width=4) (actual time=0.009..0.009 rows=1 loops=1021500)
                                                 Output: i2.fecha
CREATE INDEX
psql:explain/03_inventory_analysis_query.sql:81: ERROR:  functions in index predicate must be marked IMMUTABLE
SELECT 36132
SELECT 33788
CREATE INDEX
CREATE INDEX
SELECT 36132
CREATE INDEX
ANALYZE
ANALYZE
ANALYZE
                                                                                                QUERY PLAN
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=1387.46..1394.75 rows=2916 width=120) (actual time=17.793..18.395 rows=2898 loops=1)
   Output: categoria, marca, nombre_producto, cadena, nombre_tienda, region, stock_final, avg_daily_sales, dias_de_inventario, alerta_inventario, fecha_inventario, last_sale_date, prioridad_alerta
   Sort Key: mv_inventory_alerts.prioridad_alerta, mv_inventory_alerts.categoria, mv_inventory_alerts.cadena
   Sort Method: quicksort  Memory: 516kB
   Buffers: shared hit=768
   ->  Seq Scan on retail.mv_inventory_alerts  (cost=0.00..1219.65 rows=2916 width=120) (actual time=1.255..9.592 rows=2898 loops=1)
         Output: categoria, marca, nombre_producto, cadena, nombre_tienda, region, stock_final, avg_daily_sales, dias_de_inventario, alerta_inventario, fecha_inventario, last_sale_date, prioridad_alerta
         Filter: (mv_inventory_alerts.alerta_inventario = ANY ('{SIN_STOCK,STOCK_BAJO}'::text[]))
         Rows Removed by Filter: 33234
         Buffers: shared hit=768
 Query Identifier: 5879776415215972546
 Planning:
   Buffers: shared hit=45 read=1
   I/O Timings: shared read=0.312
 Planning Time: 18.785 ms
 Execution Time: 22.649 ms
(16 filas)


CREATE FUNCTION

